# ===============================
# = DATA SOURCE
# ===============================

# Set here configurations for the database connection
#DATABASE_URL= #moved to env var
#spring.datasource.url=jdbc:postgresql://postgresql-dev.default.svc.cluster.local:5432/libraries
#spring.datasource.url=jdbc:postgresql://postgres:5432/libraries
spring.datasource.url=jdbc:postgresql://${POSTGRES_HOST:localhost}:5432/libraries
spring.datasource.username=postgres
spring.datasource.password=postgres
#spring.datasource.url=jdbc:postgresql://${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_NAME}?sslmode=require&amp;sslfactory=org.postgresql.ssl.NonValidatingFactory
#spring.datasource.username=${DATABASE_USER}
#spring.datasource.password=${DATABASE_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1
server.port=8080
services.library-url=http://${LIBRARY_HOST:library.finarsi-rsoi.site}:8060/
#services.library-url=https://library.finarsi-rsoi.site
services.reservation-url=http://${RENTAL_HOST:rental.finarsi-rsoi.site}:8070/
#services.reservation-url=https://rental.finarsi-rsoi.site
services.rating-url=http://${RATING_HOST:rating.finarsi-rsoi.site}:8050/
#services.rating-url=https://rating.finarsi-rsoi.site

# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto = update

spring.jpa.generate-ddl=true

spring.jpa.properties.hibernate.id.new_generator_mappings=false

#server.servlet.encoding.charset=UTF-8
#server.servlet.encoding.force-response=true


spring.security.oauth2.client.registration.auth0.client-id=i4ubDJshyFiCMCLZK5cuZMWLL8LF8Aya
spring.security.oauth2.client.registration.auth0.client-secret=KIAa_WvBsBwYa00XQlsX9A7ssiio4Fv3_y8B0_CSBPM5NEz7VU_1Qq0SES7Xtj7Z
spring.security.oauth2.client.registration.auth0.scope=[openid, profile, email]
spring.security.oauth2.client.provider.auth0.issuer-uri=https://dev-m2xuc817jnql8075.jp.auth0.com/

auth0.audience=localhost:8080/api/v1
auth0.domain=dev-m2xuc817jnql8075.jp.auth0.com
spring.security.oauth2.resourceserver.jwt.issuer-uri=https://${auth0.domain}/
