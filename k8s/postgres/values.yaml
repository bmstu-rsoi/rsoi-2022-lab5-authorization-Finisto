# define default database user, name, and password for PostgreSQL deployment
auth:
  enablePostgresUser: true
  postgresPassword: "postgres"
  username: "program"
  password: "test"
  database: "postgres"

#volumePermissions:
#  enabled: true

image:
  debug: true

# The postgres helm chart deployment will be using PVC postgresql-data-claim
primary:
  persistence:
    enabled: true
    existingClaim: postgresql-data-claim

#  extraVolumes:
#    - name: postgres-seed
#      persistentVolumeClaim:
#        claimName: "postgresql-data-claim"
#
#  extraVolumeMounts:
#    - mountPath: /docker-entrypoint-initdb.d
#      name: postgres-seed

  initdb:
    scripts:
      10-create-user.sql: |
        CREATE ROLE program WITH PASSWORD 'test';
        ALTER ROLE program WITH LOGIN;
      20-db-v4.sql: |
        CREATE DATABASE reservations;
        GRANT ALL PRIVILEGES ON DATABASE reservations TO program;
        CREATE DATABASE libraries;
        GRANT ALL PRIVILEGES ON DATABASE libraries TO program;
        CREATE DATABASE ratings;
        GRANT ALL PRIVILEGES ON DATABASE ratings TO program;
      30-create-tables.sql: |
        \c reservations
        CREATE TABLE reservation
        (
        id              SERIAL PRIMARY KEY,
        reservation_uid uuid UNIQUE NOT NULL,
        username        VARCHAR(80) NOT NULL,
        book_uid        uuid        NOT NULL,
        library_uid     uuid        NOT NULL,
        status          VARCHAR(20) NOT NULL
        CHECK (status IN ('RENTED', 'RETURNED', 'EXPIRED')),
        start_date      TIMESTAMP   NOT NULL,
        till_date       TIMESTAMP   NOT NULL
        );
        GRANT ALL PRIVILEGES ON TABLE reservation TO program;

        \c libraries
        CREATE TABLE library
        (
        id          SERIAL PRIMARY KEY,
        library_uid uuid UNIQUE  NOT NULL,
        name        VARCHAR(80)  NOT NULL,
        city        VARCHAR(255) NOT NULL,
        address     VARCHAR(255) NOT NULL
        );

        CREATE TABLE books
        (
        id        SERIAL PRIMARY KEY,
        book_uid  uuid UNIQUE  NOT NULL,
        name      VARCHAR(255) NOT NULL,
        author    VARCHAR(255),
        genre     VARCHAR(255),
        condition VARCHAR(20) DEFAULT 'EXCELLENT'
        CHECK (condition IN ('EXCELLENT', 'GOOD', 'BAD'))
        );

        CREATE TABLE library_books
        (
        id       SERIAL PRIMARY KEY,
        book_id         INT REFERENCES books (id),
        library_id      INT REFERENCES library (id),
        available_count INT NOT NULL
        );
        GRANT ALL PRIVILEGES ON TABLE library TO program;
        GRANT ALL PRIVILEGES ON TABLE books TO program;
        GRANT ALL PRIVILEGES ON TABLE library_books TO program;

        \c ratings
        CREATE TABLE rating
        (
        id       SERIAL PRIMARY KEY,
        username VARCHAR(80) NOT NULL,
        stars    INT         NOT NULL
        CHECK (stars BETWEEN 0 AND 100)
        );
        GRANT ALL PRIVILEGES ON TABLE rating TO program;

      40-create-data.sql: |
        \c libraries
        insert into library (id, library_uid, name, city, address)
        values (1, '83575e12-7ce0-48ee-9931-51919ff3c9ee',
        'Библиотека имени 7 Непьющих',
        'Москва',
        '2-я Бауманская ул., д.5, стр.1');

        insert into books (id, book_uid, name, author, genre, condition)
        values (1, 'f7cdc58f-2caf-4b15-9727-f89dcc629b27',
        'Краткий курс C++ в 7 томах',
        'Бьерн Страуструп',
        'Научная фантастика',
        'EXCELLENT');

        insert into library_books (book_id, library_id, available_count)
        values (1, 1, 1);

        \c ratings
        insert into rating (id, username, stars)
        values (1, 'Test Max', 75), (2, 'auth0|63b7ec61de8bf7f5a9944b40', 75);


