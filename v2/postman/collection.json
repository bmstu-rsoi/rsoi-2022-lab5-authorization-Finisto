{
	"info": {
		"_postman_id": "dd403a17-fd76-46c7-b079-57fecf00cc0d",
		"name": "[rsoi][lab5] Hotels Booking System",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "976707"
	},
	"item": [
		{
			"name": "Gateway API",
			"item": [
				{
					"name": "[auth] Get Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Получить токен\", () => {",
									"    pm.response.to.have.status(200)",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contains(\"application/json\");",
									"",
									"    const response = pm.response.json();",
									"    pm.expect(response.access_token).not.be.empty",
									"    pm.collectionVariables.set(\"authorizationToken\", response.access_token)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "scope",
									"value": "openid",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								},
								{
									"key": "clientId",
									"value": "{{clientId}}",
									"type": "text"
								},
								{
									"key": "clientSecret",
									"value": "{{clientSecret}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{identityProviderUrl}}/oauth/token",
							"host": [
								"{{identityProviderUrl}}"
							],
							"path": [
								"oauth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "[unauthorize] Получить список отелей",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Получение списка отелей\", () => {",
									"    pm.response.to.have.status(401)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serviceUrl}}/api/v1/hotels?page=1&size=10",
							"host": [
								"{{serviceUrl}}"
							],
							"path": [
								"api",
								"v1",
								"hotels"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[success] Получить список отелей",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Получение списка отелей\", () => {",
									"    pm.response.to.have.status(200)",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contains(\"application/json\");",
									"",
									"    const pageSize = Number(pm.request.url.query.get(\"size\"))",
									"    const hotelUid = pm.collectionVariables.get(\"hotelUid\")",
									"    ",
									"    const response = pm.response.json();    ",
									"    pm.expect(response.items).to.be.an(\"array\")",
									"    pm.expect(response.page).to.be.not.undefined",
									"    pm.expect(response.pageSize).to.be.lte(pageSize)",
									"    pm.expect(response.totalElements).to.be.not.undefined",
									"",
									"    const hotel = _.find(response.items, { \"hotelUid\": hotelUid })",
									"    pm.expect(hotel).to.be.not.undefined",
									"    pm.expect(hotel.hotelUid).to.eq(hotelUid)",
									"    pm.expect(hotel.name).to.eq(\"Ararat Park Hyatt Moscow\")",
									"    pm.expect(hotel.country).to.eq(\"Россия\")",
									"    pm.expect(hotel.city).to.eq(\"Москва\")",
									"    pm.expect(hotel.address).to.eq(\"Неглинная ул., 4\")",
									"    pm.expect(hotel.stars).to.be.eq(5)",
									"    pm.expect(hotel.price).to.be.eq(10000)",
									"    pm.collectionVariables.set(\"hotelPrice\", hotel.price)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authorizationToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serviceUrl}}/api/v1/hotels?page=1&size=10",
							"host": [
								"{{serviceUrl}}"
							],
							"path": [
								"api",
								"v1",
								"hotels"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[unauthorize] Получить информацию о статусе в программе лояльности",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Получение информации о статусе в программе лояльности\", () => {",
									"    pm.response.to.have.status(401)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serviceUrl}}/api/v1/loyalty",
							"host": [
								"{{serviceUrl}}"
							],
							"path": [
								"api",
								"v1",
								"loyalty"
							]
						}
					},
					"response": []
				},
				{
					"name": "[success] Получить информацию о статусе в программе лояльности",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Получение информации о статусе в программе лояльности\", () => {",
									"    pm.response.to.have.status(200)",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contains(\"application/json\");",
									"",
									"    const response = pm.response.json();",
									"    pm.expect(response.status).to.not.empty",
									"    pm.expect(response.discount).to.be.not.undefined",
									"    pm.collectionVariables.set(\"discount\", response.discount)",
									"    pm.expect(response.reservationCount).to.be.not.undefined",
									"    pm.collectionVariables.set(\"reservationCount\", response.reservationCount)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authorizationToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serviceUrl}}/api/v1/loyalty",
							"host": [
								"{{serviceUrl}}"
							],
							"path": [
								"api",
								"v1",
								"loyalty"
							]
						}
					},
					"response": []
				},
				{
					"name": "[unauthorize] Забронировать отель",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Забронировать отель\", () => {",
									"    pm.response.to.have.status(401)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"hotelUid\": \"{{hotelUid}}\",\n    \"startDate\": \"2021-10-08\",\n    \"endDate\": \"2021-10-11\"\n}"
						},
						"url": {
							"raw": "{{serviceUrl}}/api/v1/reservations",
							"host": [
								"{{serviceUrl}}"
							],
							"path": [
								"api",
								"v1",
								"reservations"
							]
						}
					},
					"response": []
				},
				{
					"name": "[success] Забронировать отель",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require(\"moment\")",
									"",
									"pm.test(\"Забронировать отель\", () => {",
									"    pm.response.to.have.status(200)",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contains(\"application/json\");",
									"",
									"    const hotelUid = pm.collectionVariables.get(\"hotelUid\")",
									"    const hotelPrice = pm.collectionVariables.get(\"hotelPrice\")",
									"    const discount = pm.collectionVariables.get(\"discount\")",
									"",
									"    const response = pm.response.json();",
									"    const request = JSON.parse(pm.request.body.raw)",
									"",
									"    pm.expect(response.reservationUid).to.be.not.undefined",
									"    pm.expect(response.hotelUid).to.be.eq(hotelUid)",
									"    pm.expect(response.startDate).to.be.eq(request.startDate)",
									"    pm.expect(response.endDate).to.be.eq(request.endDate)",
									"    pm.expect(response.discount).to.be.eq(discount)",
									"    pm.expect(response.status).to.be.eq(\"PAID\")",
									"    pm.expect(response.payment).to.be.not.undefined",
									"    pm.expect(response.payment.status).to.be.eq(\"PAID\")",
									"    const days = Math.abs(moment(request.startDate).diff(moment(request.endDate), \"days\"))",
									"    const price = hotelPrice * days",
									"    pm.expect(response.payment.price).to.be.eq(price - (price * discount / 100.0))",
									"",
									"    pm.collectionVariables.set(\"startDate\", request.startDate)",
									"    pm.collectionVariables.set(\"endDate\", request.endDate)",
									"    pm.collectionVariables.set(\"reservationUid\", response.reservationUid)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authorizationToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"hotelUid\": \"{{hotelUid}}\",\n    \"startDate\": \"2021-10-08\",\n    \"endDate\": \"2021-10-11\"\n}"
						},
						"url": {
							"raw": "{{serviceUrl}}/api/v1/reservations",
							"host": [
								"{{serviceUrl}}"
							],
							"path": [
								"api",
								"v1",
								"reservations"
							]
						}
					},
					"response": []
				},
				{
					"name": "[unauthorize] Информация по конкретному бронированию",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Получение информации о конкретном бронировании\", () => {",
									"    pm.response.to.have.status(401)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serviceUrl}}/api/v1/reservations/:reservationUid",
							"host": [
								"{{serviceUrl}}"
							],
							"path": [
								"api",
								"v1",
								"reservations",
								":reservationUid"
							],
							"variable": [
								{
									"key": "reservationUid",
									"value": "{{reservationUid}}",
									"description": "UUID бронирования"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[success] Информация по конкретному бронированию",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require(\"moment\")",
									"",
									"pm.test(\"Получение информации о конкретном бронировании\", () => {",
									"    pm.response.to.have.status(200)",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contains(\"application/json\");",
									"",
									"    const hotelUid = pm.collectionVariables.get(\"hotelUid\")",
									"    const reservationUid = pm.collectionVariables.get(\"reservationUid\")",
									"    const hotelPrice = pm.collectionVariables.get(\"hotelPrice\")",
									"    const startDate = pm.collectionVariables.get(\"startDate\")",
									"    const endDate = pm.collectionVariables.get(\"endDate\")",
									"    const discount = pm.collectionVariables.get(\"discount\")",
									"",
									"    const response = pm.response.json();",
									"    pm.expect(response.reservationUid).to.be.eq(reservationUid)",
									"    pm.expect(response.hotel).to.be.not.undefined",
									"    pm.expect(response.hotel.hotelUid).to.be.eq(hotelUid)",
									"    pm.expect(response.hotel.name).to.be.eq(\"Ararat Park Hyatt Moscow\")",
									"    pm.expect(response.hotel.fullAddress).to.be.eq(\"Россия, Москва, Неглинная ул., 4\")",
									"    pm.expect(response.hotel.stars).to.be.eq(5)",
									"    pm.expect(response.startDate).to.be.eq(startDate)",
									"    pm.expect(response.endDate).to.be.eq(endDate)",
									"    pm.expect(response.status).to.be.eq(\"PAID\")",
									"    pm.expect(response.payment).to.be.not.undefined",
									"    pm.expect(response.payment.status).to.be.eq(\"PAID\")",
									"    ",
									"    const days = Math.abs(moment(startDate).diff(moment(endDate), \"days\"))",
									"    const price = hotelPrice * days",
									"    pm.expect(response.payment.price).to.be.eq(price - (price * discount / 100.0))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authorizationToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serviceUrl}}/api/v1/reservations/:reservationUid",
							"host": [
								"{{serviceUrl}}"
							],
							"path": [
								"api",
								"v1",
								"reservations",
								":reservationUid"
							],
							"variable": [
								{
									"key": "reservationUid",
									"value": "{{reservationUid}}",
									"description": "UUID бронирования"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[unauthorize] Информация по всем бронированиям пользователя",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Получение информации по всем бронированиям\", () => {",
									"    pm.response.to.have.status(401)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serviceUrl}}/api/v1/reservations",
							"host": [
								"{{serviceUrl}}"
							],
							"path": [
								"api",
								"v1",
								"reservations"
							]
						}
					},
					"response": []
				},
				{
					"name": "[success] Информация по всем бронированиям пользователя",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require(\"moment\")",
									"",
									"pm.test(\"Получение информации по всем бронированиям\", () => {",
									"    pm.response.to.have.status(200)",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contains(\"application/json\");",
									"",
									"    const hotelUid = pm.collectionVariables.get(\"hotelUid\")",
									"    const reservationUid = pm.collectionVariables.get(\"reservationUid\")",
									"    const hotelPrice = pm.collectionVariables.get(\"hotelPrice\")",
									"    const startDate = pm.collectionVariables.get(\"startDate\")",
									"    const endDate = pm.collectionVariables.get(\"endDate\")",
									"    const discount = pm.collectionVariables.get(\"discount\")",
									"",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an(\"array\")",
									"    const reservation = _.find(response, { \"reservationUid\": reservationUid })",
									"    ",
									"    pm.expect(reservation.reservationUid).to.be.eq(reservationUid)",
									"    pm.expect(reservation.hotel).to.be.not.undefined",
									"    pm.expect(reservation.hotel.hotelUid).to.be.eq(hotelUid)",
									"    pm.expect(reservation.hotel.name).to.be.eq(\"Ararat Park Hyatt Moscow\")",
									"    pm.expect(reservation.hotel.fullAddress).to.be.eq(\"Россия, Москва, Неглинная ул., 4\")",
									"    pm.expect(reservation.hotel.stars).to.be.eq(5)",
									"    pm.expect(reservation.startDate).to.be.eq(startDate)",
									"    pm.expect(reservation.endDate).to.be.eq(endDate)",
									"    pm.expect(reservation.status).to.be.eq(\"PAID\")",
									"    pm.expect(reservation.payment).to.be.not.undefined",
									"    pm.expect(reservation.payment.status).to.be.eq(\"PAID\")",
									"    const days = Math.abs(moment(startDate).diff(moment(endDate), \"days\"))",
									"    const price = hotelPrice * days",
									"    pm.expect(reservation.payment.price).to.be.eq(price - (price * discount / 100.0))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authorizationToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serviceUrl}}/api/v1/reservations",
							"host": [
								"{{serviceUrl}}"
							],
							"path": [
								"api",
								"v1",
								"reservations"
							]
						}
					},
					"response": []
				},
				{
					"name": "[unauthorize] Информация о пользователе",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Получение информации о пользователе\", () => {",
									"    pm.response.to.have.status(401)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serviceUrl}}/api/v1/me",
							"host": [
								"{{serviceUrl}}"
							],
							"path": [
								"api",
								"v1",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "[success] Информация о пользователе",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require(\"moment\")",
									"",
									"pm.test(\"Получение информации о пользователе\", () => {",
									"    pm.response.to.have.status(200)",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contains(\"application/json\");",
									"",
									"    const hotelUid = pm.collectionVariables.get(\"hotelUid\")",
									"    const reservationUid = pm.collectionVariables.get(\"reservationUid\")",
									"    const hotelPrice = pm.collectionVariables.get(\"hotelPrice\")",
									"    const startDate = pm.collectionVariables.get(\"startDate\")",
									"    const endDate = pm.collectionVariables.get(\"endDate\")",
									"    const discount = pm.collectionVariables.get(\"discount\")",
									"",
									"    const response = pm.response.json();",
									"    pm.expect(response.reservations).to.be.not.undefined",
									"    pm.expect(response.reservations).to.be.an(\"array\")",
									"    const reservation = _.find(response.reservations, { \"reservationUid\": reservationUid })",
									"    ",
									"    pm.expect(reservation.reservationUid).to.be.eq(reservationUid)",
									"    pm.expect(reservation.hotel).to.be.not.undefined",
									"    pm.expect(reservation.hotel.hotelUid).to.be.eq(hotelUid)",
									"    pm.expect(reservation.hotel.name).to.be.eq(\"Ararat Park Hyatt Moscow\")",
									"    pm.expect(reservation.hotel.fullAddress).to.be.eq(\"Россия, Москва, Неглинная ул., 4\")",
									"    pm.expect(reservation.hotel.stars).to.be.eq(5)",
									"    pm.expect(reservation.startDate).to.be.eq(startDate)",
									"    pm.expect(reservation.endDate).to.be.eq(endDate)",
									"    pm.expect(reservation.status).to.be.eq(\"PAID\")",
									"    pm.expect(reservation.payment).to.be.not.undefined",
									"    pm.expect(reservation.payment.status).to.be.eq(\"PAID\")",
									"    const days = Math.abs(moment(startDate).diff(moment(endDate), \"days\"))",
									"    const price = hotelPrice * days",
									"    pm.expect(reservation.payment.price).to.be.eq(price - (price * discount / 100.0))",
									"",
									"    pm.expect(response.loyalty).to.be.not.undefined",
									"    pm.expect(response.loyalty.status).to.not.empty",
									"    pm.expect(response.loyalty.discount).to.be.eq(discount)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authorizationToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serviceUrl}}/api/v1/me",
							"host": [
								"{{serviceUrl}}"
							],
							"path": [
								"api",
								"v1",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "[success] Получить информацию о статусе в программе лояльности после бронирования",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Получение информации о статусе в программе лояльности\", () => {",
									"    pm.response.to.have.status(200)",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contains(\"application/json\");",
									"",
									"    const reservationCount = pm.collectionVariables.get(\"reservationCount\")",
									"",
									"    const response = pm.response.json();",
									"    pm.expect(response.status).to.not.empty",
									"    pm.expect(response.discount).to.be.not.undefined",
									"    pm.expect(response.reservationCount).to.be.eq(reservationCount + 1)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authorizationToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serviceUrl}}/api/v1/loyalty",
							"host": [
								"{{serviceUrl}}"
							],
							"path": [
								"api",
								"v1",
								"loyalty"
							]
						}
					},
					"response": []
				},
				{
					"name": "[unauthorize] Отменить бронирование",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Отменить бронирование\", () => {",
									"    pm.response.to.have.status(401)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{serviceUrl}}/api/v1/reservations/:reservationUid",
							"host": [
								"{{serviceUrl}}"
							],
							"path": [
								"api",
								"v1",
								"reservations",
								":reservationUid"
							],
							"variable": [
								{
									"key": "reservationUid",
									"value": "{{reservationUid}}",
									"description": "UUID бронирования"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[success] Отменить бронирование",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Отменить бронирование\", () => {",
									"    pm.response.to.have.status(204)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authorizationToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{serviceUrl}}/api/v1/reservations/:reservationUid",
							"host": [
								"{{serviceUrl}}"
							],
							"path": [
								"api",
								"v1",
								"reservations",
								":reservationUid"
							],
							"variable": [
								{
									"key": "reservationUid",
									"value": "{{reservationUid}}",
									"description": "UUID бронирования"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set(\"hotelUid\", \"049161bb-badd-4fa8-9d90-87c9a82b0668\")"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"variable": [
		{
			"key": "serviceUrl",
			"value": "http://localhost:8080"
		},
		{
			"key": "hotelUid",
			"value": ""
		},
		{
			"key": "reservationCount",
			"value": ""
		},
		{
			"key": "discount",
			"value": ""
		},
		{
			"key": "hotelPrice",
			"value": ""
		},
		{
			"key": "reservationUid",
			"value": ""
		},
		{
			"key": "startDate",
			"value": ""
		},
		{
			"key": "endDate",
			"value": ""
		},
		{
			"key": "authorizationToken",
			"value": ""
		}
	]
}